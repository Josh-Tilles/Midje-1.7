The code is a mix of old and new terminology. The following
terms are used internally:

  (with-state-changes [(before :facts (f 1) => 2)]    ;; `with-state-changes` contains one kind of *background
                                                      ;; changer*, called a *state changer*.
                                                      ;; `with-state-changes` is quickly expanded into the
                                                      ;; older `against-background` form, so you'll see
                                                      ;; many references to `against-background`.

    (fact               
      (prerequisite (g 8) => 3)  ;; In the user documentation, this is a "fact-wide prerequisite".
                                 ;; In the code, it's another form of background changer, a
                                 ;; *prerequisite installer*. Prerequisites are sometimes called *fakes*. 

      (h 1) => 5                 ;; Checkables are parsed into an `expect` form. During migration
                                 ;; to new terminology, you'll sometimes see "expect" and sometimes
                                 ;; "checkable".

      (provided                     
        (g 2) => 5)                ;; Prerequisites after `provided` are parsed into either `fake`
        ..foo.. =contains=> {:x 1} ;; or `data-fake` forms. Note the inconsistent naming between
                                   ;; prerequisites introduced by `prerequisite` or `against-background` and
                                   ;; that introduced by `provided`. These forms are sometimes called *local
                                   ;; fakes* to distinguish them from "background" fakes.


Within a fact, background changers may appear in either *wrapping style* or *extractable style*.
Here are examples of wrapping style:

   (fact
     (against-background [...]    ;; A version that contains prerequisite installers is allowed
       (fact ...))                ;; but deprecated.

   (fact
     (with-state-changes [...]    
       (fact ...)))               ;; It makes no sense to have a state changes without an enclosed fact.

Here are examples of extractable style:
   
   (fact
     (against-background (f) => 1, (g) => 1)    ;; State changers are allowed but deprecated.
     (against-background [(f) => 1, (g) => 1])  ;; vector is allowed
     (background (f) => 1, (g) => 1)
     (background [(f) => 1, (g) => 1])
     (prerequisites (f) => 1, (g) => 1)
     (prerequisite [(f) => 1, (g) => 1]))

During processing of a fact, top-level extractable background changers
are pulled out and wrapped around it (as in wrapping style).

There's an annoying interaction between `with-state-changes` and tabular facts - see
[[INTERACTION CASE]] in `test/user/fus_tabular.clj`. As a result, we also allow
`with-state-changes` within a fact:

   (tabular
     (fact
       (with-state-changes [(before :facts (swap! before-fact inc))
                            (before :checks (swap! before-check inc))])
       ...)
     ...)



